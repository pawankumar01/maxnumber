// Code generated by protoc-gen-go. DO NOT EDIT.
// source: maxnumber.proto

package maxnumber

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The request message containing the user's name.
type NumberMesg struct {
	Number               int32    `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NumberMesg) Reset()         { *m = NumberMesg{} }
func (m *NumberMesg) String() string { return proto.CompactTextString(m) }
func (*NumberMesg) ProtoMessage()    {}
func (*NumberMesg) Descriptor() ([]byte, []int) {
	return fileDescriptor_f89e07bb98a8bde8, []int{0}
}

func (m *NumberMesg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NumberMesg.Unmarshal(m, b)
}
func (m *NumberMesg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NumberMesg.Marshal(b, m, deterministic)
}
func (m *NumberMesg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NumberMesg.Merge(m, src)
}
func (m *NumberMesg) XXX_Size() int {
	return xxx_messageInfo_NumberMesg.Size(m)
}
func (m *NumberMesg) XXX_DiscardUnknown() {
	xxx_messageInfo_NumberMesg.DiscardUnknown(m)
}

var xxx_messageInfo_NumberMesg proto.InternalMessageInfo

func (m *NumberMesg) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func init() {
	proto.RegisterType((*NumberMesg)(nil), "maxnumber.NumberMesg")
}

func init() { proto.RegisterFile("maxnumber.proto", fileDescriptor_f89e07bb98a8bde8) }

var fileDescriptor_f89e07bb98a8bde8 = []byte{
	// 107 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcf, 0x4d, 0xac, 0xc8,
	0x2b, 0xcd, 0x4d, 0x4a, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x84, 0x0b, 0x28,
	0xa9, 0x70, 0x71, 0xf9, 0x81, 0x59, 0xbe, 0xa9, 0xc5, 0xe9, 0x42, 0x62, 0x5c, 0x6c, 0x10, 0x71,
	0x09, 0x46, 0x05, 0x46, 0x0d, 0xd6, 0x20, 0x28, 0xcf, 0xc8, 0x8b, 0x8b, 0x0d, 0xa2, 0x4a, 0xc8,
	0x81, 0x8b, 0xab, 0x38, 0x35, 0x2f, 0x05, 0xca, 0x13, 0xd5, 0x43, 0x18, 0x8d, 0x30, 0x46, 0x0a,
	0xbb, 0xb0, 0x12, 0x83, 0x06, 0xa3, 0x01, 0x63, 0x12, 0x1b, 0xd8, 0x0d, 0xc6, 0x80, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xec, 0x2c, 0x4d, 0x98, 0x96, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NumberClient is the client API for Number service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NumberClient interface {
	// Sends a number
	SendNumber(ctx context.Context, opts ...grpc.CallOption) (Number_SendNumberClient, error)
}

type numberClient struct {
	cc *grpc.ClientConn
}

func NewNumberClient(cc *grpc.ClientConn) NumberClient {
	return &numberClient{cc}
}

func (c *numberClient) SendNumber(ctx context.Context, opts ...grpc.CallOption) (Number_SendNumberClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Number_serviceDesc.Streams[0], "/maxnumber.Number/sendNumber", opts...)
	if err != nil {
		return nil, err
	}
	x := &numberSendNumberClient{stream}
	return x, nil
}

type Number_SendNumberClient interface {
	Send(*NumberMesg) error
	Recv() (*NumberMesg, error)
	grpc.ClientStream
}

type numberSendNumberClient struct {
	grpc.ClientStream
}

func (x *numberSendNumberClient) Send(m *NumberMesg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *numberSendNumberClient) Recv() (*NumberMesg, error) {
	m := new(NumberMesg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NumberServer is the server API for Number service.
type NumberServer interface {
	// Sends a number
	SendNumber(Number_SendNumberServer) error
}

func RegisterNumberServer(s *grpc.Server, srv NumberServer) {
	s.RegisterService(&_Number_serviceDesc, srv)
}

func _Number_SendNumber_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NumberServer).SendNumber(&numberSendNumberServer{stream})
}

type Number_SendNumberServer interface {
	Send(*NumberMesg) error
	Recv() (*NumberMesg, error)
	grpc.ServerStream
}

type numberSendNumberServer struct {
	grpc.ServerStream
}

func (x *numberSendNumberServer) Send(m *NumberMesg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *numberSendNumberServer) Recv() (*NumberMesg, error) {
	m := new(NumberMesg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Number_serviceDesc = grpc.ServiceDesc{
	ServiceName: "maxnumber.Number",
	HandlerType: (*NumberServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "sendNumber",
			Handler:       _Number_SendNumber_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "maxnumber.proto",
}
